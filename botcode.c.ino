// Generated by Proteus Visual Designer for Arduino

// Peripheral Configuration Code (Do Not Edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#include <core.h> // Required by cpu
#include <cpu.h>
#include <Generic.h>
#include <Servo.h> // Required by M1
#include <Generic/GenericServo.h>
#include "Adafruit_VL53L0X.h" //lidar sensor
#include <SPI.h> //SD card
#include <SD.h>

#pragma GCC pop_options

// Peripheral Constructors
CPU &cpu = Cpu;
GenericServo M1 = GenericServo ();
GenericServo M2 = GenericServo ();
GenericButton ON_OFF_RESET = GenericButton (0);
GenericButton RECORD_PLAYLIVE = GenericButton (11);
GenericButton PLAY = GenericButton (12);
GenericButton STOP = GenericButton (13);
Adafruit_VL53L0X lox = Adafruit_VL53L0X(); //lidar sensor

//global var
File myFile;

void peripheral_setup () {
 M1.begin (9, 0.001, 0.002);
 M2.begin (10, 0.001, 0.002);
}

void peripheral_loop() {
}



void setup()
{
 // Open serial communications and wait for port to open:
  Serial.begin(9600);
   while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

/*
  SD card read/write
  The circuit:
 * SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 4
 */
  Serial.print("Initializing SD card...");
  // On the Ethernet Shield, CS is pin 4. It's set as an output by default.
  // Note that even if it's not used as the CS pin, the hardware SS pin 
  // (10 on most Arduino boards, 53 on the Mega) must be left as an output 
  // or the SD library functions will not work. 
   pinMode(10, OUTPUT);
   
  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");

  /*
   * Lidar sensor set up
   */
    Serial.begin(115200);

  // wait until serial port opens for native USB devices
  while (! Serial) {
    delay(1);
  }
  
  Serial.println("Adafruit VL53L0X test");
  if (!lox.begin()) {
    Serial.println(F("Failed to boot VL53L0X"));
    while(1);
  }
  // power 
  Serial.println(F("VL53L0X API Simple Ranging example\n\n")); 
}

/*
 * function that corresponds distance to HZ and appends HZ/note to SD card file
 * eight ranges corresponding to eight notes
 * ranges are 100mm or 3.9 in apart
 */

 
void recordNote(double measurementMM){
  double hz = 0;
  //eight ranges corresponding to eight notes
  //if statements set correct HZ value
  if (measurementMM < 100){
    hz = 110.0 //A2
  }
  else if (measurementMM < 200){
    hz = 123.471 //B2
  }
  else if(measurementMM < 300){
    hz = 130.813 //C3
  }
  else if(measurementMM < 400){
    hz = 146.832 //D3
  }
  else if(measurementMM < 500){
    hz = 164.814 //E3
  }
  else if (measurementMM < 600){
    hz = 174.614 //F3
  }
  else if(measurmentMM < 700){
    hz = 195.998 //G3
  }
  else{
    hz = 207.652 //G#3
  }

  //append HZ to SD card file 
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open("notes.txt", FILE_WRITE);
  
  // if the file opened okay, write to it:
  if (myFile) {
    Serial.print("Writing to notes.txt...");
    myFile.println(hz);
  // close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }
}

void loop(){
  VL53L0X_RangingMeasurementData_t measure;
    
  Serial.print("Reading a measurement... ");
  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!

  //this is where we're getting LIDAR data
  if (measure.RangeStatus != 4) {  // phase failures have incorrect data
    Serial.print("Distance (mm): "); Serial.println(measure.RangeMilliMeter);
  } else {
    Serial.println(" out of range ");
  }

  recordNote(measure.RangeMilliMeter);
    
  delay(100);
}
